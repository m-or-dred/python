def det(matriz):
 if len(matriz) == len(matriz[0]):
  if len(matriz) > 1:
   d = 0
   for k in range(len(matriz)):
    R = [[matriz[i][j] for j in range(len(matriz)) if j != k] for i in range(1, len(matriz))]
    d += (-1) ** k * matriz[0][k] * det(R)
   return d

  else:
   return matriz[0][0]

T = [[M[i][j] for i in range(len(M))] for j in range(len(M))]

if det(M):
 C = [[] for i in range(len(M))]
 for i in range(len(M)):
  for j in range(len(M)):
   R = [[M[m][n] for n in range(len(M)) if n != j] for m in range(len(M)) if m != i]
   C[i].append((-1) ** (i+j) * det(R))

	A = [[C[i][j] for i in range(len(M))] for j in range(len(M))]
	I = [[A[i][j]/det(M) for j in range(len(M))] for i in range(len(M))]

	# S = [[M[i][j]*I[i][j] for j in range(len(M))] for i in range(len(M))]

	# P = [[0 for p in range(len(M))] for m in range(len(M))]

	# for m in range(len(M)):

	# 	for n in range(len(M)):

	# 		for p in range(len(M)):  P[m][p] += M[m][n] * I[n][p]

	# print('cofatotes:')
	# for row in C:  print(row)
	# print()

	# print('adjunta:')
	# for row in A:  print(row)
	# print()

	# print('inversa:')
	# for row in I:  print(row)
	# print()

	# print('estrutural:')
	# for row in S:  print(row)
	# print()

	# print('matricial:')
	# for row in P:  print(row)

	print(T==I)
