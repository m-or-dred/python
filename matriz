def det(matriz):

	if len(matriz) == len(matriz[0]):

		if len(matriz) > 1:

			d = 0

			for k in range(len(matriz)):

				R = [[matriz[i][j] for j in range(len(matriz)) if j != k] for i in range(1, len(matriz))]

				d += (-1) ** k * matriz[0][k] * det(R)

			return d

		else:  return matriz[0][0]

from random import randint as _

M = [[_(1,9) for j in range(3)] for i in range(3)]

print('matriz:')
for row in M:  print(row)
print('determinante:', det(M))
print()

if det(M) != 0:

	C = [[] for i in range(3)]

	for i in range(3):

		for j in range(3):

			R = [[M[m][n] for n in range(3) if n != j] for m in range(3) if m != i]

			C[i].append((-1)**(i+j) * det(R))

	A = [[C[i][j] for i in range(3)] for j in range(3)]

	I = [[A[i][j]/det(M) for j in range(3)] for i in range(3)]

	S = [[M[i][j]*I[i][j] for j in range(3)] for i in range(3)]

	P = [[0 for p in range(3)] for m in range(3)]

	for m in range(3):

		for n in range(3):

			for p in range(3):  P[m][p] += M[m][n] * I[n][p]

	print('cofatotes:')
	for row in C:  print(row)
	print()

	print('adjunta:')
	for row in A:  print(row)
	print()

	print('inversa:')
	for row in I:  print(row)
	print()

	print('estrutural:')
	for row in S:  print(row)
	print()

	print('matricial:')
	for row in P:  print(row)
